% function Hd = filtro_IIR_Butter
%FILTRO_IIR_BUTTER Returns a discrete-time filter object.

% MATLAB Code
% Generated by MATLAB(R) 9.2 and the DSP System Toolbox 9.4.
% Generated on: 29-Jun-2018 15:23:03

% Butterworth Lowpass filter designed using FDESIGN.LOWPASS.

% All frequency values are in Hz.
clear
close all
clc

Fs = 1000;  % Sampling Frequency

N  = 8;  % Order
Fc = 8;  % Cutoff Frequency

% Construct an FDESIGN object and call its BUTTER method.
h  = fdesign.lowpass('N,F3dB', N, Fc, Fs);
Hd = design(h, 'butter');


[b,a]=butter(N,Fc/(Fs/2)); %Coeficientes del filtro ,b num, a den


hd=tf(b,a,1);

b1=fir1(N*2,Fc/(Fs/2));

hd2=tf(b1,1,1);

% [EOF]

%Modulacion AM

t=0:0.001:2;
mt=10*0.5*sin(50*t);
ct=10*2*sin(500*t);
sm=mt.*ct;
subplot(3,1,1)
plot(t,mt)
subplot(3,1,2)
plot(t,ct)
subplot(3,1,3)
plot(t,sm)
%Demodulacion
smm=sm.*ct;
sd=filter(b,a,smm);
sd2=filter(b1,1,smm);
figure
subplot(2,1,1)
plot(t,smm)
subplot(2,1,2)
plot(t,sd)
hold on
plot(t,mt)
plot(t,sd2)


%Algoritmo para filtrar, solucion de la ecuacion en diferencia
l=length(b);

L=length(smm);
x=zeros(1,l); %Vector de entradas
x1=zeros(1,l);
%d=[1 2 4 -1];
y=zeros(1,l); %Vector de salidas
y1=y;
k=1;
yf=zeros(1,L);
yf2=yf;
out=0;
out1=0;
% coef=[1 2 3 4];


for j=1:L
    
    %Valor actual
    x(1)=smm(j);
    x1(1)=smm(j);
    y(1)=out;
    y1(1)=out1;
    
    %Primera forma usando las cualidades de Matlab
    out1=0;
    out1=b*x1'-a(2:end)*y1(2:end)';
    if out1<1 && out>-1
    yf2(j)=out1;
    end
    
    %Segundo forma usando ciclos for
    out=0;
    cx=0;
    cy=0;
    for k=1:l
        cx=cx+b(k)*x(k);
    end
    
    for k=2:l
        cy=cy+a(k)*y(k);
    end
    
    out=cx-cy;
    yf(j)=out;
    
    %Actualizo valores
    
    if j<L
        for i=l:-1:2
            x(i)=x(i-1);
            y(i)=y(i-1);
            x1(i)=x1(i-1);
            y1(i)=y1(i-1);
        end
    end
    
%     x(4)=x(3);
%     x(3)=x(2);
%     x(2)=x(1);
end

%close all
figure
plot(t,yf2)
figure
plot(t,yf)

